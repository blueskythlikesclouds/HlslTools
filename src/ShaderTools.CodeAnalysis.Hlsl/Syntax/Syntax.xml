<?xml version="1.0" encoding="utf-8" ?>
<Tree Namespace="ShaderTools.CodeAnalysis.Hlsl.Syntax" LanguageName="Hlsl" Root="SyntaxNodeBase" >
  <Using Namespace="ShaderTools.CodeAnalysis.Hlsl.Binding.BoundNodes"/>

  <PredefinedNode Name="SyntaxNode" Base="SyntaxNodeBase"/>
  <PredefinedNode Name="LocatedNode" Base="SyntaxNode"/>
  <PredefinedNode Name="SyntaxToken" Base="LocatedNode"/>

  <AbstractNode Name="BaseMatrixTypeSyntax" Base="NumericTypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="BaseVectorTypeSyntax" Base="NumericTypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="BranchingDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="BranchTaken" Type="bool" Abstract="true" />
  </AbstractNode>
  <AbstractNode Name="ConditionalDirectiveTriviaSyntax" Base="BranchingDirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="Condition" Type="ExpressionSyntax" Abstract="true" />
    <Field Name="ConditionValue" Type="bool" Abstract="true" />
  </AbstractNode>
  <AbstractNode Name="DeclarationNameSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="DefineDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="MacroName" Type="SyntaxToken" Abstract="true" />
    <Field Name="MacroBody" Type="List&lt;SyntaxToken&gt;" Abstract="true" />
  </AbstractNode>
  <AbstractNode Name="DirectiveTriviaSyntax" Base="StructuredTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="HashToken" Type="SyntaxToken" Abstract="true" />
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Abstract="true" />
    <Field Name="IsActive" Type="bool" Abstract="true" />
  </AbstractNode>
  <AbstractNode Name="ExpressionSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="FunctionSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="Attributes" Type="List&lt;AttributeDeclarationSyntaxBase&gt;" />
    <Field Name="Modifiers" Type="List&lt;SyntaxToken&gt;" />
    <Field Name="ReturnType" Type="TypeSyntax" />
    <Field Name="Name" Type="DeclarationNameSyntax" />
    <Field Name="ParameterList" Type="ParameterListSyntax" />
    <Field Name="Semantic" Type="SemanticSyntax" />
  </AbstractNode>
  <AbstractNode Name="InitializerSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="InvocationExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="ArgumentListSyntax" Type="ArgumentListSyntax" Abstract="true" />
  </AbstractNode>
  <AbstractNode Name="NameSyntax" Base="TypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="NumericTypeSyntax" Base="PredefinedTypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="PredefinedTypeSyntax" Base="TypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="StatementSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="Attributes" Type="List&lt;AttributeDeclarationSyntaxBase&gt;" />
  </AbstractNode>
  <AbstractNode Name="StructuredTriviaSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="SwitchLabelSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="ColonToken" Type="SyntaxToken" Abstract="true" />
    <Field Name="Keyword" Type="SyntaxToken" Abstract="true" />
  </AbstractNode>
  <AbstractNode Name="TypeDefinitionSyntax" Base="TypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="NameToken" Type="SyntaxToken" Abstract="true" />
  </AbstractNode>
  <AbstractNode Name="TypeSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <AbstractNode Name="VariableDeclaratorQualifierSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
  </AbstractNode>
  <Node Name="ModifiedTypeSyntax" Base="TypeSyntax">
    <Kind Name="ModifiedType"/>
    <Field Name="Modifiers" Type="List&lt;SyntaxToken&gt;" />
    <Field Name="Type" Type="TypeSyntax" />
  </Node>

  <Node Name="AnnotationsSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="Annotations"/>
    <Field Name="LessThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary>Gets the less than token.</summary>
      </PropertyComment>
      <Kind Name="LessThanToken"/>
    </Field>
    <Field Name="Annotations" Type="List&lt;VariableDeclarationStatementSyntax&gt;">
      <PropertyComment>
        <summary>Gets the annotation list.</summary>
      </PropertyComment>
    </Field>
    <Field Name="GreaterThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary>Gets the greater than token.</summary>
      </PropertyComment>
      <Kind Name="GreaterThanToken"/>
    </Field>
  </Node>

  <Node Name="ArgumentListSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ArgumentList"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Arguments" Type="SeparatedSyntaxList&lt;ExpressionSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>

  <Node Name="ArrayInitializerExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ArrayInitializerExpression"/>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Elements" Type="SeparatedSyntaxList&lt;ExpressionSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
  </Node>

  <Node Name="ArrayRankSpecifierSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ArrayRankSpecifier"/>
    <Field Name="OpenBracketToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBracketToken"/>
    </Field>
    <Field Name="Dimension" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBracketToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBracketToken"/>
    </Field>
  </Node>

  <Node Name="AssignmentExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="Left" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="OperatorToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="LessThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="LessThanToken"/>
    </Field>
    <Field Name="Right" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="GreaterThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="GreaterThanToken"/>
    </Field>
  </Node>

  <Node Name="AttributeArgumentListSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="AttributeArgumentList"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Arguments" Type="SeparatedSyntaxList&lt;LiteralExpressionSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>

  <Node Name="AttributeQualifiedNameSyntax" Base="NameSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="AttributeQualifiedName"/>
    <Field Name="Left" Type="IdentifierNameSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IdentifierName"/>
    </Field>
    <Field Name="ColonColonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonColonToken"/>
    </Field>
    <Field Name="Right" Type="IdentifierNameSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IdentifierName"/>
    </Field>
  </Node>

  <Node Name="AttributeSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="Attribute"/>
    <Field Name="Name" Type="NameSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ArgumentList" Type="AttributeArgumentListSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="AttributeArgumentList"/>
    </Field>
  </Node>

  <AbstractNode Name="AttributeDeclarationSyntaxBase" Base="SyntaxNode">
    
  </AbstractNode>

  <Node Name="AttributeSpecifierListSyntax" Base="AttributeDeclarationSyntaxBase">
    <Kind Name="AttributeSpecifierList"/>
    <Field Name="OpenBracketToken" Type="SyntaxToken">
      <Kind Name="OpenBracketToken"/>
    </Field>
    <Field Name="OpenBracketToken2" Type="SyntaxToken">
      <Kind Name="OpenBracketToken"/>
    </Field>
    <Field Name="Attributes" Type="SeparatedSyntaxList&lt;AttributeSyntax&gt;" />
    <Field Name="CloseBracketToken" Type="SyntaxToken">
      <Kind Name="CloseBracketToken"/>
    </Field>
    <Field Name="CloseBracketToken2" Type="SyntaxToken">
      <Kind Name="CloseBracketToken"/>
    </Field>
  </Node>

  <Node Name="AttributeDeclarationSyntax" Base="AttributeDeclarationSyntaxBase">
    <Kind Name="AttributeDeclaration"/>
    <Field Name="OpenBracketToken" Type="SyntaxToken">
      <Kind Name="OpenBracketToken"/>
    </Field>
    <Field Name="Attribute" Type="AttributeSyntax" />
    <Field Name="CloseBracketToken" Type="SyntaxToken">
      <Kind Name="CloseBracketToken"/>
    </Field>
  </Node>

  <Node Name="BaseListSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="BaseList"/>
    <Field Name="ColonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonToken"/>
    </Field>
    <Field Name="BaseType" Type="IdentifierNameSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IdentifierNameSyntax"/>
    </Field>
  </Node>

  <Node Name="BinaryExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="Left" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="OperatorToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Right" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="BlockSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="Block"/>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Statements" Type="List&lt;StatementSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
  </Node>

  <Node Name="BreakStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="BreakStatement"/>
    <Field Name="BreakKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="BreakKeyword"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="CaseSwitchLabelSyntax" Base="SwitchLabelSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="CaseSwitchLabel"/>
    <Field Name="CaseKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CaseKeyword"/>
      <Getter Name="Keyword" Override="true"/>
    </Field>
    <Field Name="Value" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ColonToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonToken"/>
    </Field>
  </Node>

  <Node Name="CastExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="CastExpression"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Type" Type="TypeSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ArrayRankSpecifiers" Type="List&lt;ArrayRankSpecifierSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
    <Field Name="Expression" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="CompilationUnitSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="CompilationUnit"/>
    <Field Name="Declarations" Type="List&lt;SyntaxNode&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfFileToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfFileToken"/>
    </Field>
  </Node>

  <Node Name="CompileExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="CompileExpression"/>
    <Field Name="CompileKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CompileKeyword"/>
    </Field>
    <Field Name="ShaderTargetToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ShaderFunction" Type="FunctionInvocationExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="CompoundExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="Left" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CommaToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CommaToken"/>
    </Field>
    <Field Name="Right" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="ConditionalExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ConditionalExpression"/>
    <Field Name="Condition" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="QuestionToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="QuestionToken"/>
    </Field>
    <Field Name="WhenTrue" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ColonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonToken"/>
    </Field>
    <Field Name="WhenFalse" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="ConstantBufferSyntax" Base="SyntaxNode">
    <Kind Name="ConstantBufferDeclaration"/>
    <Field Name="Attributes" Type="List&lt;AttributeDeclarationSyntaxBase&gt;" />
    <Field Name="ConstantBufferKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ConstantBufferKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Register" Type="RegisterLocation">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="RegisterLocation"/>
    </Field>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Declarations" Type="List&lt;VariableDeclarationStatementSyntax&gt;">
      <PropertyComment>
        <summary>Gets the annotation list.</summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="ContinueStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ContinueStatement"/>
    <Field Name="ContinueKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ContinueKeyword"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="DefaultSwitchLabelSyntax" Base="SwitchLabelSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="DefaultSwitchLabel"/>
    <Field Name="DefaultKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="DefaultKeyword"/>
      <Getter Name="Keyword" Override="true"/>
    </Field>
    <Field Name="ColonToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonToken"/>
    </Field>
  </Node>

  <Node Name="DiscardStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="DiscardStatement"/>
    <Field Name="DiscardKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="DiscardKeyword"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemiColonToken"/>
    </Field>
  </Node>

  <Node Name="DoStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="DoStatement"/>
    <Field Name="DoKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="DoKeyword"/>
    </Field>
    <Field Name="Statement" Type="StatementSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="WhileKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="WhileKeyword"/>
    </Field>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="ElementAccessExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ElementAccessExpression"/>
    <Field Name="Expression" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="OpenBracketToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBracketToken"/>
    </Field>
    <Field Name="Index" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBracketToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBracketToken"/>
    </Field>
  </Node>

  <Node Name="ElseClauseSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ElseClause"/>
    <Field Name="ElseKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ElseKeyword"/>
    </Field>
    <Field Name="Statement" Type="StatementSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>
 
  <Node Name="EmptyStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="EmptyStatement"/>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="EqualsValueClauseSyntax" Base="InitializerSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="EqualsValueClause"/>
    <Field Name="EqualsToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EqualsToken"/>
    </Field>
    <Field Name="Value" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="ExpressionStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ExpressionStatement"/>
    <Field Name="Expression" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="FieldAccessExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="FieldAccessExpression"/>
    <Field Name="Expression" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="DotToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="DotToken"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="DotToken"/>
    </Field>
  </Node>

  <Node Name="ForStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ForStatement"/>
    <Field Name="ForKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ForKeyword"/>
    </Field>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Declaration" Type="VariableDeclarationSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="VariableDeclaration"/>
    </Field>
    <Field Name="Initializer" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="WhileKeyword"/>
    </Field>
    <Field Name="FirstSemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="SecondSemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
    <Field Name="Incrementor" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
    <Field Name="Statement" Type="StatementSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="FunctionDeclarationSyntax" Base="FunctionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="FunctionDeclaration"/>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="FunctionDefinitionSyntax" Base="FunctionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="FunctionDefinition"/>
    <Field Name="Body" Type="BlockSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="Block"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="FunctionInvocationExpressionSyntax" Base="InvocationExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="FunctionInvocationExpression"/>
    <Field Name="Name" Type="NameSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ArgumentList" Type="ArgumentListSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ArgumentList"/>
      <Getter Name="ArgumentListSyntax" Override="true"/>
    </Field>
  </Node>

  <Node Name="GenericMatrixTypeSyntax" Base="BaseMatrixTypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PredefinedGenericMatrixType"/>
    <Field Name="MatrixKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="MatrixKeyword"/>
    </Field>
    <Field Name="LessThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="LessThanToken"/>
    </Field>
    <Field Name="ScalarType" Type="ScalarTypeSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="PredefinedScalarType"/>
    </Field>
    <Field Name="FirstCommaToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CommaToken"/>
    </Field>
    <Field Name="RowsToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="SecondCommaToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CommaToken"/>
    </Field>
    <Field Name="ColsToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="GreaterThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="GreaterThanToken"/>
    </Field>
  </Node>

  <Node Name="GenericVectorTypeSyntax" Base="BaseVectorTypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PredefinedGenericVectorType"/>
    <Field Name="VectorKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="VectorKeyword"/>
    </Field>
    <Field Name="LessThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="LessThanToken"/>
    </Field>
    <Field Name="ScalarType" Type="ScalarTypeSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="PredefinedScalarType"/>
    </Field>
    <Field Name="CommaToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CommaToken"/>
    </Field>
    <Field Name="SizeToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="GreaterThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="GreaterThanToken"/>
    </Field>
  </Node>

  <Node Name="IdentifierDeclarationNameSyntax" Base="DeclarationNameSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="IdentifierDeclarationName"/>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="IdentifierNameSyntax" Base="NameSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="IdentifierName"/>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="IfStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="IfStatement"/>
    <Field Name="IfKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IfKeyword"/>
    </Field>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
    <Field Name="Statement" Type="StatementSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Else" Type="ElseClauseSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ElseClause"/>
    </Field>
  </Node>

  <Node Name="InterfaceTypeSyntax" Base="TypeDefinitionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="InterfaceType"/>
    <Field Name="InterfaceKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="InterfaceKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Getter Name="NameToken" Override="true"/>
    </Field>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Methods" Type="List&lt;FunctionDeclarationSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
  </Node>

  <Node Name="LiteralExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary>Float, integer, boolean, etc. literal constant.</summary>
    </TypeComment>
    <Field Name="Token" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="LogicalRegisterSpace" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="LogicalRegisterSpace"/>
    <Field Name="CommaToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CommaToken"/>
    </Field>
    <Field Name="SpaceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SpaceToken"/>
    </Field>
  </Node>

  <Node Name="MacroArgumentListSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="MacroArgumentList"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Arguments" Type="SeparatedSyntaxList&lt;MacroArgumentSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>

  <Node Name="MacroArgumentSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="MacroArgument"/>
    <Field Name="Tokens" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="MatrixTypeSyntax" Base="BaseMatrixTypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PredefinedMatrixType"/>
    <Field Name="TypeToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="MethodInvocationExpressionSyntax" Base="InvocationExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="MethodInvocationExpression"/>
    <Field Name="Target" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="DotToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="DotToken"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ArgumentList" Type="ArgumentListSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ArgumentList"/>
      <Getter Name="ArgumentListSyntax" Override="true"/>
    </Field>
  </Node>

  <Node Name="NamespaceSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="Namespace"/>
    <Field Name="NamespaceKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="NamespaceKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Declarations" Type="List&lt;SyntaxNode&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="NumericConstructorInvocationExpressionSyntax" Base="InvocationExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="NumericConstructorInvocationExpression"/>
    <Field Name="Type" Type="NumericTypeSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ArgumentList" Type="ArgumentListSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ArgumentList"/>
      <Getter Name="ArgumentListSyntax" Override="true"/>
    </Field>
  </Node>

  <Node Name="PackOffsetComponentPart" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PackOffsetComponentPart"/>
    <Field Name="DotToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="DotToken"/>
    </Field>
    <Field Name="Component" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="PackOffsetLocation" Base="VariableDeclaratorQualifierSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PackOffsetLocation"/>
    <Field Name="ColonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonToken"/>
    </Field>
    <Field Name="PackOffsetKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="PackOffsetKeyword"/>
    </Field>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Register" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ComponentPart" Type="PackOffsetComponentPart">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="PackOffsetComponentPart"/>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>

    <Node Name="PayloadAccessQualifier" Base="VariableDeclaratorQualifierSyntax">
        <Kind Name="PayloadAccessQualifier"/>
        <Field Name="ColonToken" Type="SyntaxToken">
            <Kind Name="ColonToken"/>
        </Field>
        <Field Name="ReadOrWriteKeyword" Type="SyntaxToken"/>
        <Field Name="OpenParenToken" Type="SyntaxToken">
            <Kind Name="OpenParenToken"/>
        </Field>
        <Field Name="ShaderStages" Type="SeparatedSyntaxList&lt;SyntaxNode&gt;"/>
        <Field Name="CloseParenToken" Type="SyntaxToken">
            <Kind Name="CloseParenToken"/>
        </Field>
    </Node>  

  <Node Name="ParameterListSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ParameterList"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Parameters" Type="SeparatedSyntaxList&lt;ParameterSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>

  <Node Name="ParameterSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="Parameter"/>
    <Field Name="Attributes" Type="List&lt;AttributeDeclarationSyntaxBase&gt;" />
    <Field Name="Modifiers" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Type" Type="TypeSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Declarator" Type="VariableDeclaratorSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="VariableDeclarator"/>
    </Field>
  </Node>

  <Node Name="ParenthesizedExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ParenthesizedExpression"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Expression" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>

  <Node Name="PassSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PassDeclaration"/>
    <Field Name="PassKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="PassKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Annotations" Type="AnnotationsSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="Annotations"/>
    </Field>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Statements" Type="List&lt;StatementSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
  </Node>

  <Node Name="PostfixUnaryExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="Operand" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="OperatorToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Operator" Type="UnaryOperatorKind" Derived="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="PredefinedObjectTypeSyntax" Base="PredefinedTypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PredefinedObjectType"/>
    <Field Name="ObjectTypeToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="TemplateArgumentList" Type="TemplateArgumentListSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="TemplateArgumentList"/>
    </Field>
  </Node>

  <Node Name="PrefixUnaryExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="OperatorToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Operand" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="QualifiedDeclarationNameSyntax" Base="DeclarationNameSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="QualifiedDeclarationName"/>
    <Field Name="Left" Type="DeclarationNameSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ColonColonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonColonToken"/>
    </Field>
    <Field Name="Right" Type="IdentifierDeclarationNameSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IdentifierDeclarationName"/>
    </Field>
  </Node>

  <Node Name="QualifiedNameSyntax" Base="NameSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="QualifiedName"/>
    <Field Name="Left" Type="NameSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ColonColonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonColonToken"/>
    </Field>
    <Field Name="Right" Type="IdentifierNameSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IdentifierName"/>
    </Field>
  </Node>

  <Node Name="RegisterLocation" Base="VariableDeclaratorQualifierSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="RegisterLocation"/>
    <Field Name="Colon" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonToken"/>
    </Field>
    <Field Name="RegisterKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="RegisterKeyword"/>
    </Field>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Register" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="LogicalRegisterSpace" Type="LogicalRegisterSpace">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="LogicalRegisterSpace"/>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>

  <Node Name="ReturnStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ReturnStatement"/>
    <Field Name="ReturnKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ReturnKeyword"/>
    </Field>
    <Field Name="Expression" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="SamplerStateInitializerSyntax" Base="InitializerSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="SamplerStateInitializer"/>
    <Field Name="EqualsToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EqualsToken"/>
    </Field>
    <Field Name="SamplerStateKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SamplerStateKeyword"/>
    </Field>
    <Field Name="StateInitializer" Type="StateInitializerSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="ScalarTypeSyntax" Base="NumericTypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PredefinedScalarType"/>
    <Field Name="TypeTokens" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="SemanticSyntax" Base="VariableDeclaratorQualifierSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="SemanticName"/>
    <Field Name="ColonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ColonToken"/>
    </Field>
    <Field Name="Semantic" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="SkippedTokensTriviaSyntax" Base="StructuredTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="SkippedTokensTrivia"/>
    <Field Name="Tokens" Type="List&lt;SyntaxToken&gt;" Derived="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="StateArrayInitializerSyntax" Base="InitializerSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="StateArrayInitializer"/>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Initializers" Type="SeparatedSyntaxList&lt;StateInitializerSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
  </Node>

  <Node Name="StateInitializerSyntax" Base="InitializerSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="StateInitializer"/>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Properties" Type="List&lt;StatePropertySyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
  </Node>

  <Node Name="StatePropertySyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="StateProperty"/>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ArrayRankSpecifier" Type="ArrayRankSpecifierSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ArrayRankSpecifier"/>
    </Field>
    <Field Name="EqualsToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EqualsToken"/>
    </Field>
    <Field Name="LessThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="LessThanToken"/>
    </Field>
    <Field Name="Value" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="GreaterThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="GreaterThanToken"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="StringLiteralExpressionSyntax" Base="ExpressionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="StringLiteralExpression"/>
    <Field Name="Tokens" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="StructTypeSyntax" Base="TypeDefinitionSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Field Name="StructKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="StructKeyword"/>
    </Field>
    <Field Name="Attributes" Type="List&lt;AttributeDeclarationSyntaxBase&gt;" />
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Getter Name="NameToken" Override="true"/>
    </Field>
    <Field Name="BaseList" Type="BaseListSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="BaseList"/>
    </Field>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Members" Type="List&lt;SyntaxNode&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
  </Node>

  <Node Name="SwitchSectionSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="SwitchSection"/>
    <Field Name="Labels" Type="List&lt;SwitchLabelSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Statements" Type="List&lt;StatementSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="SwitchStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="SwitchStatement"/>
    <Field Name="SwitchKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SwitchKeyword"/>
    </Field>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Expression" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Sections" Type="List&lt;SwitchSectionSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
  </Node>

  <Node Name="TemplateArgumentListSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="TemplateArgumentList"/>
    <Field Name="LessThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="LessThanToken"/>
    </Field>
    <Field Name="Arguments" Type="SeparatedSyntaxList&lt;ExpressionSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="GreaterThanToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="GreaterThanToken"/>
    </Field>
  </Node>

  <Node Name="TechniqueSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="TechniqueDeclaration"/>
    <Field Name="TechniqueKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="TechniqueKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Annotations" Type="AnnotationsSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="Annotations"/>
    </Field>
    <Field Name="OpenBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Passes" Type="List&lt;PassSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseBraceToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseBraceToken"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="TypeAliasSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="TypeAlias"/>
    <Field Name="Identifier" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ArrayRankSpecifiers" Type="List&lt;ArrayRankSpecifierSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Qualifiers" Type="List&lt;VariableDeclaratorQualifierSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Annotations" Type="AnnotationsSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="Annotations"/>
    </Field>
  </Node>

  <Node Name="TypeDeclarationStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="TypeDeclarationStatement"/>
    <Field Name="Modifiers" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Type" Type="TypeDefinitionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="TypedefStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="TypedefStatement"/>
    <Field Name="TypedefKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="TypedefKeyword"/>
    </Field>
    <Field Name="Modifiers" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Type" Type="TypeSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Declarators" Type="SeparatedSyntaxList&lt;TypeAliasSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="VariableDeclarationStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="VariableDeclarationStatement"/>
    <Field Name="Declaration" Type="VariableDeclarationSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="VariableDeclaration"/>
    </Field>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>

  <Node Name="VariableDeclarationSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="VariableDeclaration"/>
    <Field Name="Modifiers" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Type" Type="TypeSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Variables" Type="SeparatedSyntaxList&lt;VariableDeclaratorSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="VariableDeclaratorSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="VariableDeclarator"/>
    <Field Name="Identifier" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ArrayRankSpecifiers" Type="List&lt;ArrayRankSpecifierSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Qualifiers" Type="List&lt;VariableDeclaratorQualifierSyntax&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="Annotations" Type="AnnotationsSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="Annotations"/>
    </Field>
    <Field Name="Initializer" Type="InitializerSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="VectorTypeSyntax" Base="BaseVectorTypeSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PredefinedVectorType"/>
    <Field Name="TypeToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="WhileStatementSyntax" Base="StatementSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="WhileStatement"/>
    <Field Name="WhileKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="WhileKeyword"/>
    </Field>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
    <Field Name="Statement" Type="StatementSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>



  <!-- Preprocessor directives -->
  <Node Name="BadDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="BadDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="Identifier" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="IfDirectiveTriviaSyntax" Base="ConditionalDirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="IfDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="IfKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IfKeyword"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="BranchTaken" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ConditionValue" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="IfDefDirectiveTriviaSyntax" Base="ConditionalDirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="IfDefDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="IfDefKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IfDefKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="BranchTaken" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ConditionValue" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="IfNDefDirectiveTriviaSyntax" Base="ConditionalDirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="IfNDefDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="IfNDefKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IfNDefKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="BranchTaken" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ConditionValue" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="ElifDirectiveTriviaSyntax" Base="ConditionalDirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ElifDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="ElifKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ElifKeyword"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="BranchTaken" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="ConditionValue" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="ElseDirectiveTriviaSyntax" Base="BranchingDirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ElseDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="ElseKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ElseKeyword"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="BranchTaken" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="EndIfDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="EndIfDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="EndIfKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndIfKeyword"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="ObjectLikeDefineDirectiveTriviaSyntax" Base="DefineDirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ObjectLikeDefineDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="DefineKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="DefineKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Getter Name="MacroName" Override="true"/>
    </Field>
    <Field Name="Body" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Getter Name="MacroBody" Override="true"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="FunctionLikeDefineDirectiveTriviaSyntax" Base="DefineDirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="FunctionLikeDefineDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="DefineKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="DefineKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Getter Name="MacroName" Override="true"/>
    </Field>
    <Field Name="Parameters" Type="FunctionLikeDefineDirectiveParameterListSyntax">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="FunctionLikeDefineDirectiveParameterList"/>
    </Field>
    <Field Name="Body" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Getter Name="MacroBody" Override="true"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="FunctionLikeDefineDirectiveParameterListSyntax" Base="SyntaxNode">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="FunctionLikeDefineDirectiveParameterList"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Parameters" Type="SeparatedSyntaxList&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>

  <Node Name="IncludeDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="IncludeDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="IncludeKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="IncludeKeyword"/>
    </Field>
    <Field Name="Filename" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="UndefDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="UndefDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="UndefKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="UndefKeyword"/>
    </Field>
    <Field Name="Name" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="LineDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="LineDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="LineKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="LineKeyword"/>
    </Field>
    <Field Name="Line" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="File" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="ErrorDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="ErrorDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="ErrorKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="ErrorKeyword"/>
    </Field>
    <Field Name="TokenString" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>

  <Node Name="PragmaDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <TypeComment>
      <summary></summary>
    </TypeComment>
    <Kind Name="PragmaDirectiveTrivia"/>
    <Field Name="HashToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="PragmaKeyword" Type="SyntaxToken">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="PragmaKeyword"/>
    </Field>
    <Field Name="TokenString" Type="List&lt;SyntaxToken&gt;">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true">
      <PropertyComment>
        <summary></summary>
      </PropertyComment>
    </Field>
  </Node>
</Tree>
